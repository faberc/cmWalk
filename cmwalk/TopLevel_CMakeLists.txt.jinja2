cmake_minimum_required(VERSION 3.9)

# set the toolchain file.
# toolchain file should be set before "project" command.
# the toolchain file can also be set via "cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file".
set(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)

project({{ project_name }})
enable_language(C CXX ASM)

# load and run the CMake code from the given file to specify project specific options.
include(options.txt)


# specify the executable target, the CMake code included from subdirectories will
# update the dependent sources.
add_executable({{ project_name }}.elf
{%  if files|length > 0 %}
{% for fname in files %}
    {{ fname }}
{% endfor %}
{% else %}
    ""
{% endif %}
)

{% if subdirs|length > 0 %}
# specify the executable target through a variable for CMakeLists.txt files in subdirectories.
set(CURRENT_EXE_NAME ${PROJECT_NAME}.elf)
# load and run the CMake code from subdirectories for current target.
{% for subdir in subdirs %}
include({{ subdir }}/CMakeLists.txt)
{% endfor %}
{% endif %}


# generate the hex file from the built target.
set(HEX_FILE ${PROJECT_NAME}.hex)
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
    COMMENT "Building ${HEX_FILE}...")

# generate the bin file from the built target.
set(BIN_FILE ${PROJECT_NAME}.bin)
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
    COMMENT "Building ${BIN_FILE}...")